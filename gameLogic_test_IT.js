describe("In Hex Game", function() {
  var _gameLogic;

  beforeEach(module("myApp"));

  beforeEach(inject(function (gameLogic) {
    _gameLogic = gameLogic;
  }));

  function expectMoveOk(turnIndexBeforeMove, stateBeforeMove, move) {
    expect(_gameLogic.isMoveOk({turnIndexBeforeMove: turnIndexBeforeMove,
      stateBeforeMove: stateBeforeMove,
      move: move})).toBe(true);
  }

  function expectIllegalMove(turnIndexBeforeMove, stateBeforeMove, move) {
    expect(_gameLogic.isMoveOk({turnIndexBeforeMove: turnIndexBeforeMove,
      stateBeforeMove: stateBeforeMove,
      move: move})).toBe(false);
  }


    it("placing multipe pices on the board at a time should be illegal", function() {
        expectIllegalMove(0,[{setTurn: {turnIndex : 0}},
                {set: {key: 'board', value:
                    [['R', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', '']]}},
                {set: {key: 'delta', value: {row: 0, col: 0}}}],
            [{setTurn: {turnIndex : 1}},
                {set: {key: 'board', value:
                    [['R', 'R', 'R', 'R', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', '']]}},
                {set: {key: 'delta', value: {row: 0, col: 3}}}]);
    });

    //This depends on how the platform is implemented but you should check that state makes sense not too many red or blue
    //I guess if the player cannot put an extra player during a single turn then this might not happen
    it("should have the 0 - 1 more red spots then blue spots since each player populates after a turn", function(){
     expectIllegalMove(1,
     {board:
     [['R', 'R', 'R', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', '']], delta: {row: 0, col: 0}},
     [{setTurn: {turnIndex : 0}},
     {set: {key: 'board', value:
     [['R', 'R', 'R', 'B', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', ''],
     ['', '', '', '', '', '', '', '', '', '', '']]}},
     {set: {key: 'delta', value: {row: 0, col: 3}}}]);
    });

    //This is only passing becuase it doesn't know that column row 10 has won.
    it("expecting winning move to be ok", function(){
        expectMoveOk(1,
            {board:
                [['R', 'R', 'R', 'R', '', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', 'R', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', '']], delta: {row: 0, col: 0}},
            [{setTurn: {turnIndex : 0}},
                {set: {key: 'board', value:
                    [['R', 'R', 'R', 'R', '', 'R', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', 'R', '', '', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', 'R', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B']]}},
                {set: {key: 'delta', value: {row: 10, col: 10}}}]);
    });

    //Fails becuase of the angular.equals statment, you are checking the entire state not just the state of the board.
    it("expecting winning on row 9 to be ok", function(){
        expectMoveOk(1,
            {board:
                [['R', 'R', 'R', 'R', '', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', 'R', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', ''],
                    ['', '', '', '', '', '', '', '', '', '', '']], delta: {row: 0, col: 0}},
            [{setTurn: {turnIndex : 0}},
                {set: {key: 'board', value:
                    [['R', 'R', 'R', 'R', '', 'R', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', 'R', '', '', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', 'R', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B'],
                        ['', '', '', '', '', '', '', '', '', '', '']]}},
                {set: {key: 'delta', value: {row: 9, col: 10}}}]);
    });


    //This is actually failing becuase of a win on the final row, you are only iterating through row 9 so row 10 is
    //ignored in the win calculation row 89 and95
    it("expecting move after win to be illegal", function(){
        expectIllegalMove(0,
            {board:
                [['R', 'R', 'R', 'R', '', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', 'R', '', '', ''],
                    ['', '', '', '', '', '', 'R', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B']], delta: {row: 10, col: 10}},
            [{setTurn: {turnIndex : 1}},
                {set: {key: 'board', value:
                    [['R', 'R', 'R', 'R', 'R', 'R', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', 'R', '', '', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', 'R', '', '', ''],
                        ['', '', '', '', '', '', 'R', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B']]}},
                {set: {key: 'delta', value: {row: 0, col: 4}}}]);
    });

    //Checking for equlity between 2 states on line 232 is not enough since you are using create move to get the expected
    //move and not just the board. So it is finding that the endMatch !== setTurn
    it("expect winning move to be legal", function(){
        expectMoveOk(1,
            {board:
                [['R', 'R', 'R', 'R', 'R', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', 'R', '', '', '', '', ''],
                    ['', '', '', '', '', '', 'R', 'B', 'B', 'B', ''],
                    ['', '', '', '', '', '', 'B', '', '', '', ''],
                    ['', '', '', '', '', 'B', '', '', '', '', ''],
                    ['', '', '', '', 'B', '', 'R', '', '', '', ''],
                    ['', '', '', 'B', '', '', '', 'R', '', '', ''],
                    ['', '', 'B', '', '', '', 'R', '', '', '', ''],
                    ['B', 'B', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '', '']], delta: {row: 10, col: 10}},
            [{setTurn: {turnIndex : 0}},
                {set: {key: 'board', value:
                    [['R', 'R', 'R', 'R', 'R', 'R', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', 'R', '', '', '', '', 'B'],
                        ['', '', '', '', '', '', 'R', 'B', 'B', 'B', ''],
                        ['', '', '', '', '', '', 'B', '', '', '', ''],
                        ['', '', '', '', '', 'B', '', '', '', '', ''],
                        ['', '', '', '', 'B', '', 'R', '', '', '', ''],
                        ['', '', '', 'B', '', '', '', 'R', '', '', ''],
                        ['', '', 'B', '', '', '', 'R', '', '', '', ''],
                        ['B', 'B', '', '', '', '', '', '', '', '', ''],
                        ['', '', '', '', '', '', '', '', '', '', '']]}},
                {set: {key: 'delta', value: {row: 2, col: 10}}}]);
    });

 
});
